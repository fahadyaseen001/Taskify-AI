name: Cleanup Deployments

on:
  # Run manually from the Actions tab
  workflow_dispatch:
    
  # Run after each deployment
  deployment_status:
    types: [success]

jobs:
  cleanup:
    name: Cleanup Old Deployments
    runs-on: ubuntu-latest
    
    steps:
      - name: Delete Deployments
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const environments = await github.rest.repos.getAllEnvironments({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            for (const env of environments.data.environments) {
              console.log(`Processing environment: ${env.name}`);
              
              const deployments = await github.rest.repos.listDeployments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                environment: env.name,
                per_page: 100
              });
              
              // Keep only the most recent deployment
              const deploymentsToDelete = deployments.data.slice(1);
              
              for (const deployment of deploymentsToDelete) {
                try {
                  // Get all statuses for this deployment
                  const statuses = await github.rest.repos.listDeploymentStatuses({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    deployment_id: deployment.id
                  });
                  
                  // Set all active statuses to inactive
                  for (const status of statuses.data) {
                    if (status.state === 'success' || status.state === 'active') {
                      await github.rest.repos.createDeploymentStatus({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        deployment_id: deployment.id,
                        state: 'inactive'
                      });
                    }
                  }
                  
                  // Delete the deployment
                  await github.rest.repos.deleteDeployment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    deployment_id: deployment.id
                  });
                  
                  console.log(`Successfully deleted deployment ${deployment.id} from ${env.name}`);
                } catch (error) {
                  console.error(`Error processing deployment ${deployment.id}:`, error);
                }
              }
            }
            console.log('Deployment cleanup completed');

      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Deployment Cleanup Failed',
              body: 'The deployment cleanup workflow has failed. Please check the workflow logs for more details.'
            });
            console.log('Created issue #' + issue.data.number); 